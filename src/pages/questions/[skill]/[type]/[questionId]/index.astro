---
import ContentTabs from '@/components/content-tabs';
import Logo from '@/components/logo.astro';
import { ModeToggle } from '@/components/mode-toggle';
import SEO from '@/components/seo.astro';
import { buttonVariants } from '@/components/ui/button';
import ProseLayout from '@/layouts/prose-layout.astro';
import QuestionLayoutWrapper from '@/layouts/question-layout-wrapper';
import QuestionLayout from '@/layouts/question-layout.astro';
import { getCollection, getEntry } from 'astro:content';

export async function getStaticPaths() {
	const allQuestions = await getCollection('questions');

	return allQuestions.map((question) => {
		return {
			params: {
				skill: question.data.skill,
				type: question.data.type,
				questionId: question.slug,
			},
			props: { question },
		};
	});
}

const { question } = Astro.props;

// eslint-disable-next-line @typescript-eslint/no-explicit-any
let QuestionContent: any;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
let SolutionContent: any;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
let TheoryContent: any;

if (question.data.type === 'coding') {
	const { Content: LocalQuestionContent } = await import(
		`../../../../../content/questions/${question.slug}/_question.mdx`
	);

	QuestionContent = LocalQuestionContent;

	const { Content: LocalSolutionContent } = await import(
		`../../../../../content/questions/${question.slug}/_solution.mdx`
	);

	SolutionContent = LocalSolutionContent;
} else {
	const { Content: LocalTheoryContent } = await import(
		`../../../../../content/questions/${question.slug}/_theory.mdx`
	);

	TheoryContent = LocalTheoryContent;
}

const author = await getEntry(question.data.author);

const title = question.data.title;
const description = question.data.description;
---

<QuestionLayout>
	<SEO
		slot='head'
		title={title}
		description={description}
		pageType='article'
		author={author.data.name}
		date={question.data.publishDate.toISOString()}
	/>

	<header slot='header' class='relative flex items-center justify-between py-2'>
		<a
			class={buttonVariants({ variant: 'secondary', size: 'sm' })}
			href='/questions'>All Questions</a
		>
		<div
			class='md:absolute md:left-1/2 md:top-1/2 md:-translate-x-1/2 md:-translate-y-1/2'
		>
			<Logo />
		</div>
		<ModeToggle client:load />
	</header>

	{
		question.data.type === 'theory' && (
			<div class='flex h-0 grow flex-col overflow-y-auto'>
				<ProseLayout class='px-2 lg:px-20'>
					<TheoryContent />
				</ProseLayout>
			</div>
		)
	}

	{
		question.data.type === 'coding' && (
			<QuestionLayoutWrapper client:load>
				<ContentTabs slot='left' client:load>
					<div
						slot='question'
						class='flex h-0 grow flex-col overflow-y-auto p-4'
					>
						<ProseLayout>
							<QuestionContent />
						</ProseLayout>
					</div>

					<div
						slot='solution'
						class='flex h-0 grow flex-col overflow-y-auto p-4'
					>
						<ProseLayout>
							<SolutionContent />
						</ProseLayout>
					</div>
				</ContentTabs>

				<div slot='right' class='flex h-0 grow flex-col overflow-y-auto'>
					<iframe
						class='h-full'
						width='100%'
						height='100%'
						title={question.data.title}
						src={question.data.embedUrl}
					/>
				</div>
			</QuestionLayoutWrapper>
		)
	}
</QuestionLayout>
